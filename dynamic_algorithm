#다이나믹 알고리즘을 활용해 최대값 구하기(바텀 업)
#현재 위치로부터 인접 항 제외 Array 내 조합을 통해 최대의 합을 구한다 
#정수 N을 입력받기
n=int(input())

#모든 식량 정보 입력받기
array=list(map(int, input().split()))

#앞서 계산된 결과를 저장하기 위한 DP Table 초기화
d=[0]*100

#다이나믹 프로그래밍(보텀업)
d[0]=array[0]
d[1]=max(array[0],array[1])

for i in range(2,n):
    d[i]=max(d[i-1],d[i-2]+array[i])

#계산된 결과 출력
print(d[n-1])

========================================================

#다이나믹 알고리즘을 활용해 최소값 구하기(바텀 업)
#4가지 연산을 활용하여 최소의 연산 횟수를 구한다.
#정수 X를 입력 받기
x=int(input())

#앞서 계산된 결과를 저장하기 위한 DP 초기화
d=[0]*30001

#다이나믹 프로그래밍(바텀업 구조)
for i in range(2, x+1):
    #현재 수에서 1을 빼는 경우
    d[i]=d[i-1]+1
    #현재의 수에서 2로 나누어 떨어지는 경우
    if i%2==0:
        d[i]=min(d[i], d[i//2]+1)
    #현재의 수가 3으로 나누어 떨어지는 경우
    if i%3==0:
        d[i]=min(d[i], d[i//3]+1)
    if i%5==0:
        d[i]=min(d[i], d[i//5]+1)

print(d[x])

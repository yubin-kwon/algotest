#사이클 판별 알고리즘
#간선으로 연결된 노드 중 큰 값을 루트 노드로 등록
#루트가 모두 가장 작은 값 하나로 되어 있을 경우, 사이클 발생으로 판단

#특정 원소가 속한 집합을 찾기
def find_parent(parent, x):
    #루트 노드가 아니라면, 루트 노드를 찾을 때까지 재귀적으로 호출
    if parent[x]!=x:
        parent[x]=find_parent(parent, parent[x])
    return parent[x]

#두 원소가 속한 집합을 합치기
def union_parent(parent, a, b):
    a=find_parent(parent, a)
    b=find_parent(parent, b)
    if a<b:
        parent[b]=a
    else:
        parent[a]=b

#노드의 개수와 간선(union 연산)의 개수 입력받기
v,e=map(int, input().split())
parent=[0]*(v+1) #부모 테이블 초기화

#부모 테이블 상에서, 부모를 자기 자신으로 초기화
for i in range(1, v+1):
    parent[i]=i

cycle=False #사이클 발생 여부를 확인할 플래그

for i in range(e):
    a,b=map(int, input().split())
    #사이클이 발생한 경우 종료
    if find_parent(parent[a])==find_parent(parent[b]):
        cycle=True
        break
    #사이클이 발생하지 않았다면 합집합(union) 수행
    else:
        union_parent(parent, a, b)

If cycle:
    print("사이클이 발생했습니다.")
else:
    print("사이클이 발생하지 않았습니다")
